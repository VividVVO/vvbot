// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package gvg_group

import (
	"errors"
	"fmt"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/util/grand"
	"github.com/vivid-vvo/vvbot/app/model/clan_group"
	"time"
)

// Fill with you ideas below.

func ApplyChallenge(qqid int64, gvgId int) error {
	if _, err := Update(
		g.Map{
			"challenge_strat_qqid": qqid,
			"challenge_strat_time": time.Now().Unix(),
		}, "gvg_id", gvgId); err != nil {
		return errors.New(fmt.Sprintf("内部错误"))
	}
	return nil
}

// 锁定BOSS
func BossLock(qqid int64, gvgid int, state int, msg string) error {
	_, err := Update(g.Map{
		"boss_lock_qqid": qqid,
		"boss_lock_type": state,
		"boss_lock_msg":  msg,
		"boss_lock_time": time.Now().Unix(),
	}, "gvg_id", gvgid)
	if err != nil {
		return errors.New(fmt.Sprintf("内部错误"))
	}
	return nil
}

// Boss是否被锁定
func BossIsLock(gvgid int) (bool, error) {
	gvgGroup, err := FindOne("gvg_id", gvgid)
	if err != nil {
		return false, errors.New(fmt.Sprintf("内部错误"))
	}
	if gvgGroup.BossLockType == 1 {
		return true, nil
	}
	return false, nil
}

// 解锁BOSS
func UnLockBoss(gvgId int) error {
	if _, err := Update(
		g.Map{
			"boss_lock_time": 0,
			"boss_lock_msg":  "",
			"boss_lock_type": 0,
			"boss_lock_qqid": 0,
		}, "gvg_id", gvgId); err != nil {
		return errors.New(fmt.Sprintf("内部错误"))
	}
	return nil
}

// 取消出刀
func CancelChallenge(gvgId int) error {
	if _, err := Update(
		g.Map{
			"challenge_strat_qqid": 0,
			"challenge_strat_time": 0,
		}, "gvg_id", gvgId); err != nil {
		return errors.New(fmt.Sprintf("内部错误"))
	}
	return nil
}

// 获取公会战信息
func GetGvgGroupData(gvgid int) (*Entity, error) {
	entity, err := FindOne("gvg_id", gvgid)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("内部错误"))
	}
	return entity, err
}

// 创建一个新的公会战
func GvgGroupCreate(entity *Entity) error {

	if _, err := Insert(entity); err != nil {
		return errors.New("内部错误")
	}
	if _, err := clan_group.Update(g.Map{"gvg_id": entity.GvgId}, "group_id", entity.GroupId); err != nil {
		return errors.New("内部错误")
	}
	return nil
}

func UpdateGvgBossData(gvgid int, cycle int, bossNum int, bossHp int, BossFullHp int) error {
	if _, err := Update(g.Map{"boss_cycle": cycle, "boss_num": bossNum, "boss_hp": bossHp, "boss_full_hp": BossFullHp}, "gvg_id", gvgid); err != nil {
		return errors.New(fmt.Sprintf("内部错误"))
	}
	return nil
}

func CreateGvgId() int {
	return grand.N(100000000, 1000000000)
}
