// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package clan_group

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table clan_group.
type Entity struct {
    GroupId      int    `orm:"group_id"      json:"group_id"`      //   
    GroupName    string `orm:"group_name"    json:"group_name"`    //   
    Privacy      int    `orm:"privacy"       json:"privacy"`       //   
    CreatorQqid  int    `orm:"creator_qqid"  json:"creator_qqid"`  //   
    GameServer   string `orm:"game_server"   json:"game_server"`   //   
    Notification string `orm:"notification"  json:"notification"`  //   
    GvgId        int    `orm:"gvg_id"        json:"gvg_id"`        //   
    BindQqGroup  int    `orm:"bind_qq_group" json:"bind_qq_group"` //   
    Apikey       string `orm:"apikey"        json:"apikey"`        //   
    CreateTime   int    `orm:"create_time"   json:"create_time"`   //   
    Deleted      int    `orm:"deleted"       json:"deleted"`       //   
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}