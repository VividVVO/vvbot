// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package clan_group

// Fill with you ideas below.
import (
	"errors"
	"fmt"
	"github.com/gogf/gf/frame/g"
	_ "github.com/mattn/go-sqlite3"
)

// 公会组创建
func ClanGroupCreate(entity *Entity) error {
	if _, err := Insert(entity); err != nil {
		return errors.New(fmt.Sprintf("内部错误"))
	}
	return nil
}

func GetClanData(groupid int) (*Entity, error) {
	if entity, err := FindOne("group_id", groupid); err != nil {
		return nil, errors.New(fmt.Sprintf("内部错误"))
	} else {
		return entity, nil
	}
}

// 根据ID查询指定公会
func GetClanGroup(groupId int) (*Entity, error) {
	one, err := FindOne("group_id", groupId)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("内部错误"))
	}
	return one, nil
}

// 根据公会名查询指定公会
func GetClanGroupAtName(groupName string) (*Entity, error) {
	one, err := FindOne("group_name", groupName)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("内部错误"))
	}
	return one, nil
}

// 根据QQ群ID查询指定公会
func GetClanGroupAtQqGroupId(qqGroupId int64) (*Entity, error) {
	one, err := FindOne("bind_qq_group", qqGroupId)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("内部错误"))
	}
	return one, nil
}

// 解绑QQ群
func UnBindGroup(qqGroupId int64) error {
	_, err := Update(g.Map{"bind_qq_group": 0}, "bind_qq_group=?", qqGroupId)
	if err != nil {
		return errors.New(fmt.Sprintf("内部错误"))
	}
	return nil
}

// 绑定QQ群
func BindGroup(groupid int, qqGroupId int64) error {
	_, err := Update(g.Map{"bind_qq_group": qqGroupId}, "group_id=?", groupid)
	if err != nil {
		return errors.New(fmt.Sprintf("内部错误"))
	}
	return nil
}

// 绑定绑定公会战
func BindGvg(groupid int, gvgid int) error {
	_, err := Update(g.Map{"gvg_id": gvgid}, "group_id=?", groupid)
	if err != nil {
		return errors.New(fmt.Sprintf("内部错误"))
	}
	return nil
}

// 指定公会IP是否存在
func IsClanGroupExits(groupId int) (bool, error) {
	one, err := FindOne("group_id", groupId)
	if err != nil {
		return false, errors.New(fmt.Sprintf("内部错误"))
	}
	if one == nil {
		return false, nil
	}
	return true, nil
}

// 根据公会组名指定公会IP是否存在
func IsClanGroupExitsToGroupName(groupName string) (bool, error) {
	one, err := FindOne("group_name", groupName)
	if err != nil {
		return false, errors.New(fmt.Sprintf("内部错误"))
	}
	if one == nil {
		return false, nil
	}
	return true, nil
}

// select clan_group.*,(select count(*) from clan_member where clan_member.group_id = clan_group.group_id ) member_num from clan_group
type ClanGroupEntity struct {
	Entity
	MemberNum int `orm:"member_num"       json:"member_num"` //
}

// GetAllClanGroup 查询所有公会组
func GetAllClanGroup() ([]*ClanGroupEntity, error) {
	clanGroups := ([]*ClanGroupEntity)(nil)
	err := Model.Fields("clan_group.*,(select count(*) from clan_member where clan_member.group_id = clan_group.group_id ) member_num").Structs(&clanGroups)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("内部错误"))
	}

	return clanGroups, nil
}

// 根据ID列表查询指定公会列表
func GetClanGroupList(groupIdLIst []int) ([]*ClanGroupEntity, error) {
	// ALL, err := FindAll("group_id IN(?)", groupIdLIst)
	clanGroups := ([]*ClanGroupEntity)(nil)
	err := Model.Fields("clan_group.*,(select count(*) from clan_member where clan_member.group_id = clan_group.group_id ) member_num").Where("group_id IN(?)", groupIdLIst).Structs(&clanGroups)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("内部错误"))
	}
	return clanGroups, nil
}

// ChangeClanInfo 修改公会信息
func ChangeClanInfo(groupId int, groupName string, bindQQGroup int64, gameServer string, apikey string) error {
	_, err := Update(g.Map{
		"group_name":    groupName,
		"bind_qq_group": bindQQGroup,
		"game_server":   gameServer,
		"apikey":        apikey,
	}, "group_id", groupId)
	if err != nil {
		return errors.New(fmt.Sprintf("内部错误"))
	}
	return nil
}
