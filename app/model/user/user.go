// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package user

// Fill with you ideas below.
import (
	"crypto/sha256"
	"errors"
	"fmt"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/os/gtime"
	_ "github.com/mattn/go-sqlite3"
)

const (
	AuthUser       = 0
	AuthAdmin      = 1
	AuthSuperAdmin = 2
)

// GetProfile 获得用户信息详情
func GetProfile(qqid int) (*Entity, error) {
	userDataForm, err := FindOne("qqid", qqid)
	if err != nil {
		return nil, errors.New("内部错误")
	}
	return userDataForm, nil
}

// ChangeClanGroupId 修改用户公会组ID;
func ChangeClanGroupId(qqid int, groupId int) error {
	if _, err := Update(g.Map{"clan_group_id": groupId}, "qqid", qqid); err != nil {
		return errors.New(fmt.Sprintf("内部错误"))
	}
	return nil
}

// SignUp 用户注册
func SignUp(qqid int, password string, Nickname string, createIp string) error {
	entity := new(Entity)
	entity.Nickname = Nickname
	entity.Qqid = qqid
	entity.Password = fmt.Sprintf("%x", sha256.Sum256([]byte(password)))
	entity.CreateIp = createIp
	// 记录账号创建/注册时间
	entity.CreateTime = int(gtime.Now().Unix())
	if _, err := Insert(entity); err != nil {

		return errors.New(fmt.Sprintf("内部错误"))
	}
	return nil
}

// GetUserAuthorityGroup 0 普通用户, 1 管理员
func GetUserAuthorityGroup(qqid int) (int, error) {
	user, err := GetProfile(qqid)
	if err != nil {
		return 0, err
	}
	var authorityGroup int
	if user.AuthorityGroup == 0 {
		authorityGroup = 0
	} else if user.AuthorityGroup == 100 {
		authorityGroup = 1
	}
	return authorityGroup, nil
}

// CheckUserAuthorityGroup 检测用户组权限
func CheckUserAuthorityGroup(qqid int, auth int) bool {
	auth1, err := GetUserAuthorityGroup(qqid)
	if err != nil {
		return false
	}
	return auth1 >= auth
}
