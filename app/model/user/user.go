// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package user

// Fill with you ideas below.
import (
	"crypto/sha256"
	"errors"
	"fmt"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/os/gtime"
	"github.com/gogf/gf/util/guid"
	_ "github.com/mattn/go-sqlite3"
	"time"
)

// GetProfile 获得用户信息详情
func GetProfile(qqid int64) (*Entity, error) {
	user, err := FindOne("qqid", qqid)
	if err != nil {
		return nil, errors.New("内部错误")
	}
	return user, nil
}

// GetUserList 获得用户列表
func GetUserList() ([]*Entity, error) {
	userList, err := FindAll("1=1")
	if err != nil {
		return nil, errors.New("内部错误")
	}
	return userList, nil
}

// ChangeClanGroupId 修改用户公会组ID;
func ChangeClanGroupId(qqid int64, groupId int) error {
	if _, err := Update(g.Map{"clan_group_id": groupId}, "qqid", qqid); err != nil {
		return errors.New(fmt.Sprintf("内部错误"))
	}
	return nil
}

// SignUp 用户注册
func SignUp(qqid int64, password string, Nickname string, createIp string) error {
	entity := new(Entity)
	entity.Nickname = Nickname
	entity.Qqid = qqid
	entity.Password = fmt.Sprintf("%x", sha256.Sum256([]byte(password)))
	entity.CreateIp = createIp
	// 记录账号创建/注册时间
	entity.CreateTime = gtime.Now().Unix()
	if _, err := Insert(entity); err != nil {

		return errors.New(fmt.Sprintf("内部错误"))
	}
	return nil
}

// LoginAuth 获取登录认证
func GetLoginAuth(qqid int64) (string, error) {
	auth := guid.S()
	if _, err := Update(g.Map{"login_code": auth, "login_code_time": time.Now().Unix()}, "qqid", qqid); err != nil {
		return "", errors.New(fmt.Sprintf("内部错误"))
	}
	return auth, nil
}

// LoginAuth 清除登录认证
func CleanLoginAuth(qqid string) (string, error) {
	auth := guid.S()
	if _, err := Update(g.Map{"login_code": auth}, "qqid", qqid); err != nil {
		return "", errors.New(fmt.Sprintf("内部错误"))
	}
	return auth, nil
}

// GetUserAuthorityGroup 0 普通用户, 100 管理员, 200超级管理员
func GetUserAuthorityGroup(qqid int64) (int, error) {
	user, err := GetProfile(qqid)
	if err != nil {
		return 0, err
	}
	return user.AuthorityGroup, nil
}

// 修改用户数据
func ChangeUserData(qqid int64, nickName string, auth int) error {
	_, err := Update(g.Map{
		"nickname":        nickName,
		"authority_group": auth,
	}, "qqid", qqid)
	if err != nil {
		return errors.New(fmt.Sprintf("内部错误"))
	}
	return nil
}

// ChangePassword 修改用户密码，成功返回用户信息，否则返回nil;
func ChangePassword(qqid int64, password string) error {
	tx, err := g.DB().Begin()
	if err != nil {
		return errors.New("内部错误")
	}
	defer func() {
		if err != nil {
			tx.Rollback()
		}
	}()
	_, err = tx.Table("user").Update(g.Map{"password": fmt.Sprintf("%x", sha256.Sum256([]byte(password)))}, "qqid", qqid)
	if err != nil {
		return errors.New("内部错误")
	}
	_, err = tx.Table("user_login").Delete("qqid", qqid)
	if err != nil {
		return errors.New("内部错误")
	}
	err = tx.Commit()
	if err != nil {
		return errors.New("内部错误")
	}
	return nil
}
