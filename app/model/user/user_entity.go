// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package user

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table user.
type Entity struct {
    Qqid           int    `orm:"qqid"            json:"qqid"`            //   
    Nickname       string `orm:"nickname"        json:"nickname"`        //   
    AuthorityGroup int    `orm:"authority_group" json:"authority_group"` //   
    LastLoginTime  int    `orm:"last_login_time" json:"last_login_time"` //   
    LastLoginIp    string `orm:"last_login_ip"   json:"last_login_ip"`   //   
    Password       string `orm:"password"        json:"password"`        //   
    ClanGroupId    int    `orm:"clan_group_id"   json:"clan_group_id"`   //   
    LoginCode      string `orm:"login_code"      json:"login_code"`      //   
    LoginCodeTime  int    `orm:"login_code_time" json:"login_code_time"` //   
    Deleted        int    `orm:"deleted"         json:"deleted"`         //   
    CreateTime     int    `orm:"create_time"     json:"create_time"`     //   
    CreateIp       string `orm:"create_ip"       json:"create_ip"`       //   
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}