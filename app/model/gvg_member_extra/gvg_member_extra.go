// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package gvg_member_extra

import (
	"errors"
	"fmt"
	"github.com/gogf/gf/frame/g"
	time2 "github.com/vivid-vvo/vvbot/library/time"
	"time"
)

const ExtraSl = 1
const ExtraTree = 2

// Fill with you ideas below.

// 取消SL
func CancelDaySL(qqid int, gameServer string) error {
	dayTimeS := time2.GetPcrDayStartTimeToUnix(gameServer)
	dayTimeE := time2.GetPcrDayEndTimeToUnix(gameServer)
	return CancelMemberExtra(qqid, ExtraSl, int(dayTimeS), int(dayTimeE))
}

//  报告今日SL;
func ReportDaySL(qqid int, agentQqid int, gvgId int) error {
	return ReportMemberExtra(qqid, agentQqid, gvgId, ExtraSl)
}

// 获取是今日否SL;
func GetDaySL(qqid int, gameServer string) (bool, error) {
	dayTimeS := time2.GetPcrDayStartTimeToUnix(gameServer)
	dayTimeE := time2.GetPcrDayEndTimeToUnix(gameServer)
	return GetMemberExtra(qqid, ExtraSl, int(dayTimeS), int(dayTimeE))
}

// 获取是否在树上
func GetIsUpTree(qqid int) (bool, error) {
	nowTime := time.Now().Unix()
	// 最多挂一小树
	return GetMemberExtra(qqid, ExtraTree, int(nowTime-1*60*60), int(nowTime))
}

// 获取所有在树上的
func GetAllUpTree() ([]*Entity, error) {
	nowTime := time.Now().Unix()
	// 最多挂一小树
	return GetAllMemberExtra(ExtraTree, int(nowTime-1*60*60), int(nowTime))
}

// 报告上树
func ReportUpTree(qqid int, agentQqid int, gvgId int) error {
	return ReportMemberExtra(qqid, agentQqid, gvgId, ExtraTree)
}

// 报告下树 state==0 手动直接下树, state==1 结算下树, state==2 BOSS死亡后下树
func ReportDownTree(qqid int, agentQqid int, gvgId int, state int) error {
	if state == 0 {
		return CancelLostMemberExtra(qqid, ExtraTree)
	}
	return SetLostMemberExtraState(qqid, state, ExtraTree)
}

// 设置公会成员额外数据状态
func SetLostMemberExtraState(qqid int, state int, etype int) error {
	if _, err := Model.Limit(1).Order("time dec").Update(
		g.Map{
			"state": state,
		}, "qqid=? and type=? and state=?", qqid, etype, state); err != nil {
		return errors.New(fmt.Sprintf("内部错误"))
	}
	return nil
}

// 清除公会成员额外数据
func CancelMemberExtra(qqid int, etype int, dayTimeS int, dayTimeE int) error {
	if _, err := Delete("(id,time)=(SELECT id,MAX(time) FROM `gvg_member_extra` WHERE qqid=? and time>? and time<? and type=?)", qqid, dayTimeS, dayTimeE, etype); err != nil {
		return errors.New(fmt.Sprintf("内部错误"))
	}
	return nil
}

// 清除公会成员额外数据、如 SL/挂树
func CancelLostMemberExtra(qqid int, etype int) error {
	if _, err := Delete("(id,time)=(SELECT id,MAX(time) FROM `gvg_member_extra` WHERE qqid=? and type=?)", qqid, etype); err != nil {
		return errors.New(fmt.Sprintf("内部错误"))
	}
	return nil
}

// 获取公会成员额外数据、如 SL/挂树
func GetAllMemberExtra(etype int, dayTimeS int, dayTimeE int) ([]*Entity, error) {
	entityList, err := FindAll("time>? and time<? and type=? and state=0", dayTimeS, dayTimeE, etype)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("内部错误"))
	}
	return entityList, nil
}

// 获取公会成员额外数据、如 SL/挂树
func GetMemberExtra(qqid int, etype int, dayTimeS int, dayTimeE int) (bool, error) {
	if num, err := FindCount("qqid=? and time>? and time<? and type=? and state=0", qqid, dayTimeS, dayTimeE, etype); err != nil || num == 0 {
		if num == 0 {
			return false, nil
		}
		return false, errors.New(fmt.Sprintf("内部错误"))
	}
	return true, nil
}

// 提交公会成员额外数据、如 SL/挂树
func ReportMemberExtra(qqid int, agentQqid int, gvgid int, etype int) error {
	gvgSl := Entity{
		Qqid:      qqid,
		AgentQqid: agentQqid,
		GvgId:     gvgid,
		Time:      int(time.Now().Unix()),
		Type:      etype,
	}
	if _, err := Model.FieldsEx("id").Insert(gvgSl); err != nil {
		return errors.New(fmt.Sprintf("内部错误"))
	}
	return nil
}
