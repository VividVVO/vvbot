// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package gvg_challenge

// Fill with you ideas below.
import (
	"errors"
	"fmt"
	"github.com/gogf/gf/frame/g"
	_ "github.com/mattn/go-sqlite3"
	time2 "github.com/vivid-vvo/vvbot/library/time"
)

// 获取今日报刀次数
func GetDayChallenge(qqid int64, gvgid int, gameServer string) (int, error) {
	// 每天5点刷新
	dayTimeS := time2.GetPcrDayStartTimeToUnix(gameServer)
	dayTimeE := time2.GetPcrDayEndTimeToUnix(gameServer)
	num, err := FindCount("qqid=? and gvg_id=? and (is_continue=0 or is_surplus=1) and challenge_time>=? and challenge_time<=?  and is_delete=0 and repair_type=0", qqid, gvgid, dayTimeS, dayTimeE)
	if err != nil {
		return 0, errors.New("内部错误")
	}
	return num, nil
}

// 获取指定时间内报刀次数
func GetChallengeAtTime(qqid int64, gvgid int, timeS int64, timeE int64) (int, error) {
	num, err := FindCount("qqid=? and gvg_id=? and (is_continue=0 or is_surplus=1) and challenge_time>=? and challenge_time<=? and is_delete=0 and repair_type=0", qqid, gvgid, timeS, timeE)
	if err != nil {
		return 0, errors.New("内部错误")
	}
	return num, nil
}

func ReportChallenge(entity Entity) error {
	if _, err := Model.FieldsEx("challenge_id").Insert(entity); err != nil {
		return errors.New(fmt.Sprintf("内部错误"))
	}
	return nil
}

// 获取今日最近一刀
func GetDayLostChallenge(qqid int64, gvgId int, gameServer string) (*Entity, error) {
	dayTimeS := time2.GetPcrDayStartTimeToUnix(gameServer)
	dayTimeE := time2.GetPcrDayEndTimeToUnix(gameServer)
	gvgChallenge, err := Model.Order("challenge_id desc").FindOne("gvg_id=? and qqid=? and challenge_time>=? and challenge_time<=? and is_delete=0 and repair_type=0", gvgId, qqid, dayTimeS, dayTimeE)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("内部错误"))
	}
	return gvgChallenge, nil
}

// 获取昨日最近一刀
func GetYesterdayLostChallenge(qqid int64, gvgId int, gameServer string) (*Entity, error) {
	dayTimeS := time2.GetPcrYesterdayStartTimeToUnix(gameServer)
	dayTimeE := time2.GetPcrYesterdayEndTimeToUnix(gameServer)
	gvgChallenge, err := Model.Order("challenge_id desc").FindOne("gvg_id=? and qqid=? and challenge_time>=? and challenge_time<=? and is_delete=0 and repair_type=0", gvgId, qqid, dayTimeS, dayTimeE)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("内部错误"))
	}
	return gvgChallenge, nil
}

// 获取最近一刀撤销的刀
func GetLostChallengeToBack(qqid int64, gvgId int) (*Entity, error) {
	gvgChallenge, err := Model.Order("challenge_id desc").FindOne("gvg_id=? and qqid=? and is_delete=1 and repair_type=0", gvgId, qqid)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("内部错误"))
	}
	return gvgChallenge, nil
}

// 获取今日最近一刀撤销的刀
func GetDayLostChallengeToBack(qqid int64, gvgId int, gameServer string) (*Entity, error) {
	timeS := time2.GetPcrDayStartTimeToUnix(gameServer)
	timeE := time2.GetPcrDayEndTimeToUnix(gameServer)
	gvgChallenge, err := Model.Order("challenge_id desc").FindOne("gvg_id=? and qqid=? and challenge_time>=? and challenge_time<=? and is_delete=1 and repair_type=0", gvgId, qqid, timeS, timeE)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("内部错误"))
	}
	return gvgChallenge, nil
}

// 获取昨日最近一刀撤销的刀
func GetYesterdayLostChallengeToBack(qqid int64, gvgId int, gameServer string) (*Entity, error) {
	timeS := time2.GetPcrYesterdayStartTimeToUnix(gameServer)
	timeE := time2.GetPcrYesterdayEndTimeToUnix(gameServer)
	gvgChallenge, err := Model.Order("challenge_id desc").FindOne("gvg_id=? and qqid=? and challenge_time>=? and challenge_time<=? and is_delete=1 and repair_type=0", gvgId, qqid, timeS, timeE)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("内部错误"))
	}
	return gvgChallenge, nil
}

// 获取指定时间内最近一刀，不包括修正刀
func GetLostChallengeAtTime(qqid int64, gvgId int, timeS int64, timeE int64) (*Entity, error) {
	gvgChallenge, err := Model.Order("challenge_id desc").FindOne("gvg_id=? and qqid=? and challenge_time>=? and challenge_time<=? and is_delete=0 and repair_type=0", gvgId, qqid, timeS, timeE)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("内部错误"))
	}
	return gvgChallenge, nil
}

// GetChallengeAtQQ 获取指定QQ, 指定时间内所有刀，不包括修正刀
func GetChallengeAtQQ(qqid int64, gvgId int, timeS int64, timeE int64) ([]*Entity, error) {
	gvgChallenges, err := FindAll("gvg_id=? and qqid=? and challenge_time>=? and challenge_time<=? and is_delete=0 and repair_type=0", gvgId, qqid, timeS, timeE)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("内部错误"))
	}
	return gvgChallenges, nil
}

// 获取指定今日所有刀，不包括修正刀
func GetLostChallengeAtQQ(gvgId int, qqid int64) (*Entity, error) {
	gvgChallenge, err := Model.Order("challenge_id desc").FindOne("gvg_id=? and qqid=? and is_delete=0 and repair_type=0", gvgId, qqid)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("内部错误"))
	}
	return gvgChallenge, nil
}

// 获取最近一刀，不包括修正刀
func GetLostChallenge(gvgId int) (*Entity, error) {
	gvgChallenge, err := Model.Order("challenge_id desc").FindOne("gvg_id=? and is_delete=0 and repair_type=0", gvgId)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("内部错误"))
	}
	return gvgChallenge, nil
}

// 获取最近的一刀包括删除的，不包括修正刀
func GetLostChallengeDelete(gvgId int, qqid int64) (*Entity, error) {
	gvgChallenge, err := Model.Order("challenge_id desc").FindOne("gvg_id=? and qqid=? and repair_type=0", gvgId, qqid)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("内部错误"))
	}
	return gvgChallenge, nil
}

// 获取最近撤销的一刀，不包括修正刀
func GetLostBackChallenge(gvgId int, qqid int64) (*Entity, error) {
	gvgChallenge, err := Model.Order("challenge_id desc").FindOne("gvg_id=? and qqid=? and is_delete=1 and repair_type=0", gvgId, qqid)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("内部错误"))
	}
	return gvgChallenge, nil
}

func BackChallenge(challengeId int) error {
	if _, err := Update(g.Map{"is_delete": 1}, "challenge_id=? and is_delete=0", challengeId); err != nil {
		return errors.New(fmt.Sprintf("内部错误"))
	}
	return nil
}

// 取消撤刀，不包括修正刀
func CancelBackChallenge(challengeId int) error {
	if _, err := Update(g.Map{"is_delete": 0}, "challenge_id=? and is_delete=1 and repair_type=0", challengeId); err != nil {
		return errors.New(fmt.Sprintf("内部错误"))
	}
	return nil
}

// GetAllChallenge 获取所有战斗记录，不包括修正刀
func GetAllChallenge(gvgid int) ([]*Entity, error) {
	entitys, err := FindAll("gvg_id=? and is_delete=0 and repair_type=0", gvgid)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("内部错误"))
	}
	return entitys, nil
}

// GetAllChallengeAtTime 获取指定时间内所有战斗记录，不包括修正刀
func GetAllChallengeAtTime(gvgId int, timeS int64, timeE int64) ([]*Entity, error) {
	gvgChallenges, err := Model.Order("challenge_id asc").FindAll("gvg_id=? and challenge_time>=? and challenge_time<=? and is_delete=0 and repair_type=0", gvgId, timeS, timeE)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("内部错误"))
	}
	return gvgChallenges, nil
}

// 获取所有战斗记录，包括修正刀
func GetAllChallengeAndRepair(gvgid int) ([]*Entity, error) {
	entitys, err := FindAll("gvg_id=? and is_delete=0", gvgid)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("内部错误"))
	}
	return entitys, nil
}

// 获取最近一刀，包括修正刀
func GetLostChallengeAndRepair(gvgId int) (*Entity, error) {
	gvgChallenge, err := Model.Order("challenge_id desc").FindOne("gvg_id=? and is_delete=0", gvgId)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("内部错误"))
	}
	return gvgChallenge, nil
}

// 删除成员战斗记录
func DelUserChallenge(challengeId int) error {
	_, err := Delete("challenge_id", challengeId)
	if err != nil {
		return errors.New(fmt.Sprintf("内部错误"))
	}
	return nil
}

// 修改成员战斗记录
func ChangeUserChallenge(challengeId int, challengeDamage int, bossCycle string, bossNum string, meassage string) error {
	_, err := Update(g.Map{
		"challenge_damage": challengeDamage,
		"boss_Num":         bossNum,
		"boss_Cycle":       bossCycle,
		"message":          meassage,
	}, "challenge_id", challengeId)
	if err != nil {
		return errors.New(fmt.Sprintf("内部错误"))
	}
	return nil
}

// 获取指定战斗记录
func GetlUserChallengeAtId(challengeId int) (*Entity, error) {
	one, err := FindOne("challenge_id", challengeId)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("内部错误"))
	}
	return one, nil
}
